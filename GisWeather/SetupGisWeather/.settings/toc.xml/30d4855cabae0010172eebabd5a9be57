/*
 * Copyright ï¿½ 2008 Nokia Corporation.
 */

#include <avkon.hrh>
#include <aknnotewrappers.h>
#include <aknlists.h> // CAknSinglePopupMenuStyleListBox
#include <uri8.h>
#include <http.h>
#include <stringloader.h>
#include <chttpformencoder.h>
#include <httpstringconstants.h>
#include <http/rhttptransaction.h>
#include <http/rhttpsession.h>
#include <http/rhttpheaders.h>
//#include <HTTPClientExample.rsg>

#include <commdb.h>     //Communications database
#include <cdbpreftable.h> //Connection Preferences table
#include <commdbconnpref.h>
#include <es_enum.h>  // TConnectionInfoBuf

//#include "Client.pan"
//#include "Client.hrh"
#include "ClientEngine.h"

// Used user agent for requests
_LIT8(KUserAgent, "SimpleClient 1.0");

// This client accepts all content types.
// (change to e.g. "text/plain" for plain text only)
_LIT8(KAccept, "*/*");

const TInt KStatustextBufferSize = 32;
const TInt KInfotextBufferSize = 64;
const TInt KURIBufferSize = 128;

// ----------------------------------------------------------------------------
// CClientEngine::NewL()
//
// Creates instance of CClientEngine.
// ----------------------------------------------------------------------------
CClientEngine* CClientEngine::NewL(MClientObserver& aObserver)
  {
    CClientEngine* self = CClientEngine::NewLC(aObserver);
    CleanupStack::Pop(self);
    return self;
  }


// ----------------------------------------------------------------------------
// CClientEngine::NewLC()
//
// Creates instance of CClientEngine.
// ----------------------------------------------------------------------------
CClientEngine* CClientEngine::NewLC(MClientObserver& aObserver)
  {
    CClientEngine* self = new (ELeave) CClientEngine(aObserver);
    CleanupStack::PushL(self);
    self->ConstructL();
    return self;
  }


// ----------------------------------------------------------------------------
// CClientEngine::CClientEngine()
//
// First phase constructor.
// ----------------------------------------------------------------------------
CClientEngine::CClientEngine(MClientObserver& aObserver)
: iObserver(aObserver),
  iPostData(NULL),
  iRunning(EFalse),
  iConnectionSetupDone(EFalse),
  iPrevProfileId(-1)
  {
  }


// ----------------------------------------------------------------------------
// CClientEngine::~CClientEngine()
//
// Destructor.
// ----------------------------------------------------------------------------
CClientEngine::~CClientEngine()
    {
    delete iRepository;
    
    iSession.Close();

    // and finally close handles
    iConnection.Close();
    iSocketServ.Close();

  delete iPostData;
  }


// ----------------------------------------------------------------------------
// CClientEngine::ConstructL()
//
// Second phase construction.
// ----------------------------------------------------------------------------
void CClientEngine::ConstructL()
  {
  iRepository = CRepository::NewL( KCRUidProfileEngine );
  }


// ----------------------------------------------------------------------------
// CClientEngine::SetupConnectionL()
//
// 
// ----------------------------------------------------------------------------
void CClientEngine::SetupConnectionL()
    {
    TInt bearerFilter = EApBearerTypeAllBearers;
    TInt currentProfileId;
    
    // Check whether we are offline or online
    iRepository->Get(KProEngActiveProfile, currentProfileId);

    // Close the connection only if
    // a) this is not the first time and
    // b) the profile has changed and
    // c) either the previous or the current profile is Offline (5 = Offline)
    if (iPrevProfileId != -1 && iPrevProfileId != currentProfileId &&
       (iPrevProfileId == 5 || currentProfileId == 5))
        {
        // Close and uninitialize
        iConnectionSetupDone = EFalse;
        iSession.Close();
        iConnection.Close();
        iSocketServ.Close();
        }
    
    // Save current profile id
    iPrevProfileId = currentProfileId;

    // Try to find an existing connection. If connection has not been set up,
    // iConnection is not initialized and FindExistingConnection() fails.
    // Thus, in that case, finding must not be carried out.
    if (iConnectionSetupDone && !FindExistingConnection())
        {
        iConnectionSetupDone = EFalse;
        }
    
    if (iConnectionSetupDone)
        {
        // Connection setup is done
        return;
        }
    
    // Open RHTTPSession with default protocol ("HTTP/TCP")
    iSession.OpenL();

    // Install this class as the callback for authentication requests. When
    // page requires authentication the framework calls GetCredentialsL to get
    // user name and password.
    InstallAuthenticationL(iSession);
    
    // In offline, only WLAN connections are available
    if (currentProfileId == 5)
        {
        bearerFilter = EApBearerTypeWLAN; 
        }
    
    // Show IAP selection dialog
    CActiveApDb* aDb = CActiveApDb::NewL();
    CleanupStack::PushL(aDb);
    
  /*  CApSettingsHandler* settings = CApSettingsHandler::NewLC(
            *aDb,
            ETrue,
            EApSettingsSelListIsPopUp,
            EApSettingsSelMenuSelectNormal,
            KEApIspTypeAll,
            bearerFilter,
            KEApSortNameAscending,
            0,
            EVpnFilterBoth,
            ETrue);*/
    
  //  TInt iapRet = settings->RunSettingsL(0, iSelectedIap);
    //CleanupStack::PopAndDestroy(settings);
    CleanupStack::PopAndDestroy(aDb);
   // if (iapRet != KApUiEventSelected)
     //   {
        // Exit no selection
       // User::Leave(KErrNotReady);
        //}
//    else
  //      {
        // IAP Selected
        // Open socket server and start the connection
        User::LeaveIfError(iSocketServ.Connect());
        User::LeaveIfError(iConnection.Open(iSocketServ));
        // Now we have the iap Id. Use it to connect for the connection
        TCommDbConnPref connectPref;
        // Setup preferences 
        connectPref.SetDialogPreference(ECommDbDialogPrefDoNotPrompt);
        // Sets the CommDb ID of the IAP to use for this connection
        connectPref.SetIapId(iSelectedIap);
        // Start connection
        User::LeaveIfError(iConnection.Start(connectPref));
        // Set the sessions connection info...
        RStringPool strPool = iSession.StringPool();
        RHTTPConnectionInfo connInfo = iSession.ConnectionInfo();
        // ...to use our socket server and connection
        connInfo.SetPropertyL ( strPool.StringF(HTTP::EHttpSocketServ,
            RHTTPSession::GetTable() ), THTTPHdrVal (iSocketServ.Handle()) );
        // ...to use our connection
        connInfo.SetPropertyL ( strPool.StringF(HTTP::EHttpSocketConnection,
            RHTTPSession::GetTable() ), 
            THTTPHdrVal (REINTERPRET_CAST(TInt, &(iConnection))) );

        iConnectionSetupDone = ETrue;
        //}
    }

// ----------------------------------------------------------------------------
// Enumerates through existing connections and tries to find one that matches
// the selected IAP. If one is found, ETrue is returned; otherwise, EFalse.
// ----------------------------------------------------------------------------
TBool CClientEngine::FindExistingConnection()
    {
    TBool connected = EFalse;
    TConnectionInfoBuf connInfo;
    TUint count;
    if (iConnection.EnumerateConnections(count) == KErrNone)
        {
        for (TUint i=1; i<=count; i++)
            {
            // Note: GetConnectionInfo expects 1-based index.
            if (iConnection.GetConnectionInfo(i, connInfo) == KErrNone)
                {
                if (connInfo().iIapId == iSelectedIap)
                    {
                    connected = ETrue;
                    break;
                    }
                }
            }
        }
    return connected;
    }

// ----------------------------------------------------------------------------
// CClientEngine::SetHeaderL()
//
// Used to set header value to HTTP request
// ----------------------------------------------------------------------------
void CClientEngine::SetHeaderL(RHTTPHeaders aHeaders,
               TInt aHdrField,
               const TDesC8& aHdrValue)
  {
  RStringF valStr = iSession.StringPool().OpenFStringL(aHdrValue);
  CleanupClosePushL(valStr);
  THTTPHdrVal val(valStr);
  aHeaders.SetFieldL(iSession.StringPool().StringF(aHdrField,
    RHTTPSession::GetTable()), val);
  CleanupStack::PopAndDestroy();  // valStr
  }


// ----------------------------------------------------------------------------
// CClientEngine::IssueHTTPGetL()
//
// Start a new HTTP GET transaction.
// ----------------------------------------------------------------------------
void CClientEngine::IssueHTTPGetL(const TDesC8& aUri)
  {
  // Parse string to URI (as defined in RFC2396)
  /*TUriParser8 uri;
  uri.Parse(aUri);

  // Create HTTP connection
  TRAPD(err, SetupConnectionL());
  // User didn't select an IAP
  if (err == KErrNotReady) {
    HBufC* resTxCancelled = StringLoader::LoadLC(R_HTTP_TX_CANCELLED);
    iObserver.ClientEvent(*resTxCancelled);
    CleanupStack::PopAndDestroy(resTxCancelled);
    return;
  }
  
  // Get request method string for HTTP GET
  RStringF method = iSession.StringPool().StringF(HTTP::EGET,
    RHTTPSession::GetTable());

  // Open transaction with previous method and parsed uri. This class will
  // receive transaction events in MHFRunL and MHFRunError.
  iTransaction = iSession.OpenTransactionL(uri, *this, method);

  // Set headers for request; user agent and accepted content type
  RHTTPHeaders hdr = iTransaction.Request().GetHeaderCollection();
  SetHeaderL(hdr, HTTP::EUserAgent, KUserAgent);
  SetHeaderL(hdr, HTTP::EAccept, KAccept);

  // Submit the transaction. After this the framework will give transaction
  // events via MHFRunL and MHFRunError.
  iTransaction.SubmitL();

  iRunning = ETrue;
  HBufC* resConnecting = StringLoader::LoadLC(R_HTTP_CONNECTING);
  iObserver.ClientEvent(*resConnecting);
  CleanupStack::PopAndDestroy(resConnecting);*/
  }


// ----------------------------------------------------------------------------
// CClientEngine::IssueHTTPPostL()
//
// Start a new HTTP POST transaction.
// ----------------------------------------------------------------------------
void CClientEngine::IssueHTTPPostL(const TDesC8& aUri,
                 const TDesC8& aContentType,
                 const TDesC8& aBody)
  {
  // Parse string to URI
  TUriParser8 uri;
  uri.Parse(aUri);


  // Create HTTP connection
  TRAPD(err, SetupConnectionL());
  // User didn't select an IAP
  if (err == KErrNotReady) {
   // HBufC* resTxCancelled = StringLoader::LoadLC(R_HTTP_TX_CANCELLED);
    iObserver.ClientEvent(_L("Transaction cancelled"));
    //CleanupStack::PopAndDestroy(resTxCancelled);
    return;
  }

  // Get request method string for HTTP POST
  RStringF method = iSession.StringPool().StringF(HTTP::EPOST,
    RHTTPSession::GetTable());

  // Open transaction with previous method and parsed uri. This class will
  // receive transaction events in MHFRunL and MHFRunError.
  iTransaction = iSession.OpenTransactionL(uri, *this, method);

  // Set headers for request; user agent, accepted content type and body's
  // content type.
  RHTTPHeaders hdr = iTransaction.Request().GetHeaderCollection();
  SetHeaderL(hdr, HTTP::EUserAgent, KUserAgent);
  SetHeaderL(hdr, HTTP::EAccept, KAccept);
  SetHeaderL(hdr, HTTP::EContentType, aContentType);

  // Set this class as an data supplier. Inherited MHTTPDataSupplier methods
  // are called when framework needs to send body data.
  MHTTPDataSupplier* dataSupplier = this;
  iTransaction.Request().SetBody(*dataSupplier);

  // Submit the transaction. After this the framework will give transaction
  // events via MHFRunL and MHFRunError.
  iTransaction.SubmitL();

  iRunning = ETrue;
 // HBufC* resConnecting = StringLoader::LoadLC(R_HTTP_CONNECTING);
  iObserver.ClientEvent(_L("COnnectiong"));
  //CleanupStack::PopAndDestroy(resConnecting);
  }

// ----------------------------------------------------------------------------
// CClientEngine::CancelTransaction()
//
// Cancels currently running transaction and frees resources related to it.
// ----------------------------------------------------------------------------
void CClientEngine::CancelTransaction()
  {
  if(!iRunning)
    return;

  // Close() also cancels transaction (Cancel() can also be used but
  // resources allocated by transaction must be still freed with Close())
  iTransaction.Close();

  // Not running anymore
  iRunning = EFalse;
  //HBufC* resTxCancelled = StringLoader::LoadLC(R_HTTP_TX_CANCELLED);
  iObserver.ClientEvent(_L("Transaction cancelled"));
  //CleanupStack::PopAndDestroy(resTxCancelled);
  }


// ----------------------------------------------------------------------------
// CClientEngine::MHFRunL()
//
// Inherited from MHTTPTransactionCallback
// Called by framework to pass transaction events.
// ----------------------------------------------------------------------------
void CClientEngine::MHFRunL(RHTTPTransaction aTransaction,
              const THTTPEvent& aEvent)
  {
  switch (aEvent.iStatus)
    {
    case THTTPEvent::EGotResponseHeaders:
      {
      // HTTP response headers have been received. Use
      // aTransaction.Response() to get the response. However, it's not
      // necessary to do anything with the response when this event occurs.

      // Get HTTP status code from header (e.g. 200)
      RHTTPResponse resp = aTransaction.Response();
      TInt status = resp.StatusCode();

      // Get status text (e.g. "OK")
      TBuf<KStatustextBufferSize> statusText;
      statusText.Copy(resp.StatusText().DesC());

      //HBufC* resHeaderReceived = StringLoader::LoadLC(R_HTTP_HEADER_RECEIVED, statusText, status);
      iObserver.ClientEvent(_L("Header received"));
      //CleanupStack::PopAndDestroy(resHeaderReceived);
      }
      break;

    case THTTPEvent::EGotResponseBodyData:
      {
      MHTTPDataSupplier* dataSupplier = aTransaction.Response().Body();
      TPtrC8 ptr;
      iDataAvailable = dataSupplier->GetNextDataPart(ptr);
 
 
      // Convert to 16-bit descriptor
      HBufC* buf = HBufC::NewLC(ptr.Length());
      buf->Des().Copy(ptr);
 
      // Append to iResponseBuffer
      if (iResponseBuffer==NULL)
    	  {
    	  iResponseBuffer = buf->AllocL();
    	  }
      else
    	  {
    	  iResponseBuffer = iResponseBuffer->ReAllocL(iResponseBuffer->Length()+buf->Length());
    	  iResponseBuffer->Des().Append(*buf);
    	  }

      // Release buf
      CleanupStack::PopAndDestroy(buf);
 
      if(!iDataAvailable)
    	  {
    	  iRunning=EFalse;
    	  iTransaction.Close();
    	  }
      else
    	  {
    	  dataSupplier->ReleaseData();
    	  }
		  }
		break;

    case THTTPEvent::EResponseComplete:
      {
      // Indicates that header & body of response is completely received.
      // No further action here needed.
      //HBufC* resTxComplete = StringLoader::LoadLC(R_HTTP_TX_COMPLETE);
      iObserver.ClientEvent(_L("Response complete"));
      //CleanupStack::PopAndDestroy(resTxComplete);
      }
      break;

    case THTTPEvent::ESucceeded:
      {
      // Indicates that transaction succeeded.
      //HBufC* resTxSuccessful = StringLoader::LoadLC(R_HTTP_TX_SUCCESSFUL);
      iObserver.ClientEvent(_L("Transaction succeed"));
      //CleanupStack::PopAndDestroy(resTxSuccessful);

      // Transaction can be closed now. It's not needed anymore.
      aTransaction.Close();
      iRunning = EFalse;
      }
      break;

    case THTTPEvent::EFailed:
      {
      // Transaction completed with failure.
      //HBufC* resTxFailed = StringLoader::LoadLC(R_HTTP_TX_FAILED);
      iObserver.ClientEvent(_L("Transaction failed"));
      //CleanupStack::PopAndDestroy(resTxFailed);
      aTransaction.Close();
      iRunning = EFalse;
      }
      break;

    default:
      // There are more events in THTTPEvent, but they are not usually
      // needed. However, event status smaller than zero should be handled
      // correctly since it's error.
      {
      if (aEvent.iStatus < 0)
        {
         // HBufC* resNoInternetConnection = StringLoader::LoadLC(
           // R_HTTP_NO_INTERNET_CONNECTION, aEvent.iStatus);
          iObserver.ClientEvent(_L("No http connection"));
          //CleanupStack::PopAndDestroy(resNoInternetConnection);

          // Close the transaction on errors
          aTransaction.Close();
          iRunning = EFalse;
        }
      else
        {
        // Other events are not errors (e.g. permanent and temporary
        // redirections)
        //HBufC* resUnrecognisedEvent = StringLoader::LoadLC(
        //  R_HTTP_UNRECOGNISED_EVENT, aEvent.iStatus);
        iObserver.ClientEvent(_L("Unrecognized event"));
        //CleanupStack::PopAndDestroy(resUnrecognisedEvent);
        }
      }
      break;
    }
  }


// ----------------------------------------------------------------------------
// CClientEngine::MHFRunError()
//
// Inherited from MHTTPTransactionCallback
// Called by framework when *leave* occurs in handling of transaction event.
// These errors must be handled, or otherwise HTTP-CORE 6 panic is thrown.
// ----------------------------------------------------------------------------
TInt CClientEngine::MHFRunError(TInt aError,
                RHTTPTransaction /*aTransaction*/,
                const THTTPEvent& /*aEvent*/)
  {
  // Just notify about the error and return KErrNone.
  //HBufC* resMHFRunError = StringLoader::LoadLC(R_HTTP_MHFRUN_ERROR, aError);
	TBuf<56> buf;
	buf.Format(_L("MHFRunError: %d"),aError);
  iObserver.ClientEvent(buf);
  //CleanupStack::PopAndDestroy(resMHFRunError);
  return KErrNone;
  }


// ----------------------------------------------------------------------------
// CClientEngine::GetNextDataPart()
//
// Inherited from MHTTPDataSupplier
// Called by framework when next part of the body is needed. In this
// this provides data for HTTP post.
// ----------------------------------------------------------------------------
TBool CClientEngine::GetNextDataPart(TPtrC8& aDataPart)
  {
	TBool retVal = EFalse;
   	aDataPart.Set(iPostData->Des());
   	retVal = (aDataPart.Length() == 0);
   	iDataAvailable=retVal;
   	return retVal;
  }


// ----------------------------------------------------------------------------
// CClientEngine::ReleaseData()
//
// Inherited from MHTTPDataSupplier
// Called by framework. Allows us to release resources needed for previous
// chunk. (e.g. free buffers)
// ----------------------------------------------------------------------------
void CClientEngine::ReleaseData()
  {
	if(iDataAvailable)
		iTransaction.NotifyNewRequestBodyPartL();
  }

// ----------------------------------------------------------------------------
// CClientEngine::Reset()
//
// Inherited from MHTTPDataSupplier
// Called by framework to reset the data supplier. Indicates to the data
// supplier that it should return to the first part of the data.
// In practise an error has occured while sending data, and framework needs to
// resend data.
// ----------------------------------------------------------------------------
TInt CClientEngine::Reset()
  {
  // Nothing needed since iPostData still exists and contains all the data.
  // (If a file is used and read in small parts we should seek to beginning
  // of file and provide the first chunk again in GetNextDataPart() )
  return KErrNone;
  }


// ----------------------------------------------------------------------------
// CClientEngine::OverallDataSize()
//
// Inherited from MHTTPDataSupplier
// Called by framework. We should return the expected size of data to be sent.
// If it's not know we can return KErrNotFound (it's allowed and does not cause
// problems, since HTTP protocol allows multipart bodys without exact content
// length in header).
// ----------------------------------------------------------------------------
TInt CClientEngine::OverallDataSize()
  {
  if(iPostData)
    return iPostData->Length();
  else
    return KErrNotFound ;
  }

// ----------------------------------------------------------------------------
// CClientEngine::GetCredentialsL()
//
// Inherited from MHTTPAuthenticationCallback
// Called by framework when we requested authenticated page and framework
// needs to know username and password.
// ----------------------------------------------------------------------------
TBool CClientEngine::GetCredentialsL(const TUriC8& aURI,
                   RString aRealm,
                   RStringF aAuthenticationType,
                   RString& aUsername,
                   RString& aPassword)
  {
  // aURI, aReal and aAuthenticationType are informational only. We only need
  // to set aUsername and aPassword and return ETrue, if aUsername and
  // aPassword are provided by user.

  // Buffer for string parameters that may change order
  CDesCArrayFlat* strings = new CDesCArrayFlat(2);
  CleanupStack::PushL(strings);

  // Initialize parameter buffer

  // First parameter
  HBufC* uri16 = HBufC::NewLC(aURI.UriDes().Length());
  uri16->Des().Copy(aURI.UriDes());
  strings->AppendL(*uri16);
  CleanupStack::PopAndDestroy(uri16);

  // Second parameter
  HBufC* authType16 = HBufC::NewLC(aAuthenticationType.DesC().Length());
  authType16->Des().Copy(aAuthenticationType.DesC());
  strings->AppendL(*authType16);
  CleanupStack::PopAndDestroy(authType16);

  //HBufC* resAuthNote = StringLoader::LoadLC(R_HTTP_AUTH_NOTE, *strings);
  //HBufC* resAuthRequired = StringLoader::LoadLC(R_HTTP_AUTH_REQUIRED);
  //CEikonEnv::Static()->InfoWinL(*resAuthRequired, *resAuthNote);

  //CleanupStack::PopAndDestroy(resAuthNote);
  //CleanupStack::PopAndDestroy(resAuthRequired);

  // Query user name and password
  TBuf<KDefaultBufferSize> userName;
  TBuf<KDefaultBufferSize> password;
  //CAknMultiLineDataQueryDialog* dlg =
    //CAknMultiLineDataQueryDialog::NewL(userName, password);

  //if (!dlg->ExecuteLD(R_DIALOG_USER_PASSWORD_QUERY))
    //return EFalse; // No credentials given; must return EFalse

  // Set aUsername and aPassword
  TBuf8<KDefaultBufferSize> temp;
  temp.Copy(userName);
  TRAPD(err, aUsername = aRealm.Pool().OpenStringL(temp));
  if (!err)
    {
    temp.Copy(password);
    TRAP(err, aPassword = aRealm.Pool().OpenStringL(temp));
    if (!err) return ETrue;
    }

  // Return ETrue if user has given credentials (username and password),
  // otherwise EFlase
  return EFalse;
  }

// end of file
void CClientEngine::LoadFile(const TDesC& aFileName)
	{
	RFs aFs;
	User::LeaveIfError(aFs.Connect());
	CleanupClosePushL(aFs);

	RFile aFile;

	User::LeaveIfError(aFile.Open(aFs, aFileName, EFileShareAny));

	TInt aSize;
	User::LeaveIfError(aFile.Size(aSize));

	if(iPostDataImage)
		{
		delete iPostDataImage;
		}
	iPostDataImage = HBufC8::NewL(aSize);

	TPtr8 aPtr = iPostDataImage->Des();

	//Obviously we have to read in the data to the iPostDataImage (ray)
	aFile.Read(0, aPtr, aSize);

	aFile.Close();
	aFs.Close();
	CleanupStack::PopAndDestroy(&aFs);

	_LIT8(KDataStart,"--AaB03x");
	_LIT8(KCrlf,"\r\n");
	_LIT8(KContentFormat,"Content-Disposition: form-data; name='%S'; filename='%S'");
	//_LIT8(KFileCompletion,"'");
	TBuf<256> bufparse(aFileName);
	TBuf<256> bufContent;
	TParse p;
	p.Set(bufparse,NULL,NULL);
	bufContent.Format(KContentFormat,p.Name(),*p.Ext());

	_LIT(KContent2,"Content-Type: audio/amr");
	_LIT(KContent3,"Content-Transfer-Encoding: binary");
	_LIT8(KDataEnd,"--AaB03x--");

	if(iPostData)
		{
		delete iPostData;
		}
	iPostData = HBufC8::NewL(650+aPtr.Length());


	TPtr8 iPostDataPtr = iPostData->Des();
	iPostDataPtr.Zero();
	//iPostDataPtr.Append(KCrlf);
	//iPostDataPtr.Append(KDataStart);
	iPostDataPtr.Append(KCrlf);
	//iPostDataPtr.Append(KContent);
	iPostDataPtr.Append(bufContent);
	iPostDataPtr.Append(aFileName);
	//iPostDataPtr.Append(KFileCompletion);
	iPostDataPtr.Append(KCrlf);
	iPostDataPtr.Append(KContent2);
	iPostDataPtr.Append(KCrlf);
	iPostDataPtr.Append(KContent3);
	iPostDataPtr.Append(KCrlf);
	iPostDataPtr.Append(KCrlf);
	iPostDataPtr.Append(aPtr); //the file in binary
	iPostDataPtr.Append(KCrlf);
	//iPostDataPtr.Append(KDataEnd);
	//iPostDataPtr.Append(KCrlf);

	TUriParser8 uri;
	uri.Parse(KUploadAddress);
	  // Get request method string for HTTP POST
	RStringF method = iSession.StringPool().StringF(HTTP::EPOST,RHTTPSession::GetTable());
	iTransaction = iSession.OpenTransactionL(uri, *this, method);
	RHTTPHeaders hdr = iTransaction.Request().GetHeaderCollection();
	SetHeaderL(hdr, HTTP::EUserAgent, KUserAgent);
	SetHeaderL(hdr, HTTP::EAccept, KAccept);
	SetHeaderL(hdr, HTTP::EContentType, KPostContentType);

	MHTTPDataSupplier* dataSupplier = this;
	iTransaction.Request().SetBody(*dataSupplier);

	iTransaction.SubmitL();
	}
